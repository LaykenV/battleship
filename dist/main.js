(()=>{"use strict";class e{constructor(e){this.length=e,this.ship=this.CreateShipArray()}CreateShipArray(){let e=[];for(let t=0;t<this.length;t++)e[t]={hit:!1};return e}hit(e){this.ship[e].hit=!0}getShip(){return this.ship}getShipLength(){return this.ship.length}checkHit(e){return!0===e.hit}isSunk(){return!!this.ship.every(this.checkHit)}}class t{constructor(){this.gameBoardArray=this.createGameBoard(),this.missedAttacks=[]}createGameBoard(){let e=[],t=[];for(let a=0;a<10;a++){for(let e=0;e<10;e++)t.push({shipName:void 0,shipIndex:void 0});e.push(t),t=[]}return e}getGameBoard(){return this.gameBoardArray}chechIfShipPlacementIsValid(e,t,a){if(t>10||t<0||a>10||a<0||a+e>10)return!1;for(let r=a;r<a+e;r++)if(null!=this.gameBoardArray[r][t].shipName)return!1;return!0}placeShip(e,t,a){if(this.chechIfShipPlacementIsValid(e.getShipLength(),t,a))for(let r=0;r<e.getShipLength();r++)this.gameBoardArray[a+r][t].shipName=e,this.gameBoardArray[a+r][t].shipIndex=r}receiveAttack(e,t){null==this.gameBoardArray[t][e].shipName?this.missedAttacks.push({x:e,y:t}):this.gameBoardArray[t][e].shipName.hit(this.gameBoardArray[t][e].shipIndex)}getMissedAttacksArray(){return this.missedAttacks}checkIfAllShipSunk(){let e=!0;return this.gameBoardArray.forEach((t=>{t.forEach((t=>{t.shipName&&0==t.shipName.isSunk()&&(e=!1)}))})),e}}class a{constructor(e){this.name=e,this.turn=!0}getName(){return this.name}setName(e){this.name=e}endTurn(e){1==this.turn&&(this.turn=!1,e.startTurn())}startTurn(){0==this.turn&&(this.turn=!0)}checkTurn(){return this.turn}attack(e,t,a,r){this.checkTurn()&&(r.receiveAttack(e,t),this.endTurn(a))}}const r=document.querySelector("#battleship"),i=document.querySelector("#carrier"),n=document.querySelector("#submarine"),s=document.querySelector("#destroyer"),l=document.querySelector("#patrolboat"),c=document.querySelector(".addShips"),h=document.querySelector(".aiSide"),o=document.querySelector("#modal"),d=document.querySelector("#nameInput"),u=document.querySelector("#modalContent"),p=document.querySelector("#playerName"),y=(document.querySelector("#endGameContent"),document.querySelector("#endGameModal")),m=document.querySelector("#playAgainButton"),f=document.querySelector("#winnerText");let S=new e(5),g=new e(4),k=new e(3),A=new e(3),x=new e(2),B=new e(5),I=new e(4),v=new e(3),q=new e(3),N=new e(2),b=new t,w=new t,$=new a("Kuzuha"),L=new class extends a{constructor(e,t,a){super(e,a),this.turn=!1,this.enemyPlayer=t,this.enemyBoard=a,this.attackArray=[]}generateRandomAttack(){if(this.checkTurn()){let e={x:void 0,y:void 0};for(;;){let t=Math.floor(10*Math.random()),a=Math.floor(10*Math.random());if(e.x=t,e.y=a,!this.attackArray.some((t=>t.x==e.x&&t.y==e.y))){this.attackArray.push(e),this.attack(e.x,e.y,this.enemyPlayer,this.enemyBoard);break}}}}getAttackArray(){return this.attackArray}}("AI",$,b);function C(e){for(;;){let t=[];if(t=[Math.floor(10*Math.random()),Math.floor(10*Math.random())],w.chechIfShipPlacementIsValid(e.getShipLength(),t[0],t[1])){w.placeShip(e,t[0],t[1]);break}}}function E(e){e.addEventListener("dragstart",(e=>{e.dataTransfer.setData("text/plain",e.target.id)}))}function M(e){let t=e.dataTransfer.getData("text"),a=parseInt(e.target.getAttribute("data-x")),r=parseInt(e.target.getAttribute("data-y"));switch(t){case"battleship":if(b.chechIfShipPlacementIsValid(g.length,a,r)){b.placeShip(g,a,r),G("playerBoard",b);let e=document.querySelector(`#${t}`);c.removeChild(e),c.childNodes.length<=6&&(c.style.display="none",h.style.display="flex")}break;case"carrier":if(b.chechIfShipPlacementIsValid(S.length,a,r)){b.placeShip(S,a,r),G("playerBoard",b);let e=document.querySelector(`#${t}`);c.removeChild(e),c.childNodes.length<=6&&(c.style.display="none",h.style.display="flex")}break;case"submarine":if(b.chechIfShipPlacementIsValid(A.length,a,r)){b.placeShip(A,a,r),G("playerBoard",b);let e=document.querySelector(`#${t}`);c.removeChild(e),c.childNodes.length<=6&&(c.style.display="none",h.style.display="flex")}break;case"destroyer":if(b.chechIfShipPlacementIsValid(k.length,a,r)){b.placeShip(k,a,r),G("playerBoard",b);let e=document.querySelector(`#${t}`);c.removeChild(e),c.childNodes.length<=6&&(c.style.display="none",h.style.display="flex")}break;case"patrolboat":if(b.chechIfShipPlacementIsValid(x.length,a,r)){b.placeShip(x,a,r),G("playerBoard",b);let e=document.querySelector(`#${t}`);c.removeChild(e),c.childNodes.length<=6&&(c.style.display="none",h.style.display="flex")}}}function P(e){let t=document.querySelector(`.${e}`);for(let a=0;a<10;a++)for(let r=0;r<10;r++){let i=document.createElement("div");i.classList.add("cell"),i.setAttribute("data-x",r),i.setAttribute("data-y",a),"aiBoard"==e?i.addEventListener("click",(e=>{T(e.target)})):"playerBoard"==e&&(i.addEventListener("dragover",(e=>{e.preventDefault()})),i.addEventListener("drop",(e=>{e.preventDefault(),M(e)}))),t.appendChild(i)}}function T(e){let t=e.getAttribute("data-x"),a=e.getAttribute("data-y");$.attack(t,a,L,w),G("aiBoard",w),e.style.pointerEvents="none",w.checkIfAllShipSunk()&&V($.getName()),L.generateRandomAttack(),G("playerBoard",b),b.checkIfAllShipSunk()&&V("AI")}function V(e){y.style.display="block",f.textContent=`${e} is the winner!!`}function G(e,t){let a=t.getGameBoard(),r=t.getMissedAttacksArray();a.forEach(((t,a)=>{t.forEach(((t,r)=>{if(t.shipName)if(1==t.shipName.checkHit(t.shipName.getShip()[t.shipIndex])){let t=document.querySelector(`.${e} [data-x="${r}"][data-y ="${a}"]`);t.textContent="X",t.classList.add("hit"),t.classList.remove("occupied")}else 0==t.shipName.checkHit(t.shipName.getShip()[t.shipIndex])&&"playerBoard"==e&&document.querySelector(`.${e} [data-x="${r}"][data-y ="${a}"]`).classList.add("occupied")}))})),r.forEach((t=>{let a=document.querySelector(`.${e} [data-x="${t.x}"][data-y ="${t.y}"]`);a.textContent="X",a.classList.add("missed")}))}E(r),E(i),E(n),E(s),E(l),C(B),C(I),C(v),C(q),C(N),P("playerBoard"),P("aiBoard"),G("playerBoard",b),G("aiBoard",w),u.addEventListener("submit",(e=>{e.preventDefault();let t=d.value||"Player 1";$.setName(t),p.textContent=`${$.getName()}'s Board`,o.style.display="none"})),m.addEventListener("click",(()=>{location.reload()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,